#BlueJ class context
comment0.target=ArrayList
comment0.text=\r\n\ The\ ArrayList\ class\ will\ contain\ methods\ of\ how\ an\ ArrayList\ class\ can\ behave\:\r\n\ random\ accessing\ in\ indexes\ of\ different\ parts\ of\ the\ list,\ adding\ in\ any\ areas,\r\n\ removing\ elements\ in\ any\ areas,\ returning\ objects\ that\ are\ removed\r\n\r\n\ @author\ Eunhee\ Kim\r\n\ @version\ December\ 5,\ 2019\r\n
comment1.params=
comment1.target=ArrayList()
comment1.text=the\ default\ constructor\ that\ will\ initialize\ the\ size\ of\ the\ array\ as\r\n\ an\ empty\ array\r\n
comment10.params=
comment10.target=boolean\ isEmpty()
comment10.text=return\ a\ boolean\ that\ will\ find\ if\ there\ are\ empty\ or\ null\ areas\ in\ the\ list\r\n\r\n\ @return\ boolean\ value\ of\ whether\ the\ arraylist\ is\ empty\ or\ not\r\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=method\ that\ will\ print\ out\ the\ string\ of\ values\ from\ the\ list\r\n\ @return\ String\ of\ the\ ArrayList\ values\ in\ the\ output\r\n
comment12.params=args
comment12.target=void\ main(java.lang.String[])
comment12.text=this\ will\ contain\ a\ driver\ method\ of\ where\ the\ methods\ in\ this\ class\r\nwill\ be\ tested\r\n
comment2.params=
comment2.target=int\ size()
comment2.text=this\ method\ will\ return\ the\ size\ of\ how\ many\ elements\ are\ in\ the\ array\r\n\ @return\ int\ value\ of\ how\ many\ elements\r\n
comment3.params=index
comment3.target=java.lang.Object\ get(int)
comment3.text=this\ method\ will\ find\ the\ element\ that\ is\ found\ in\ the\ wanted\ index\r\n\ @param\ index\ int\ index\ of\ where\ to\ find\ value\ at\r\n\ @return\ TBA\ the\ element\ found\r\n
comment4.params=idx\ obj
comment4.target=void\ set(int,\ java.lang.Object)
comment4.text=this\ method\ will\ set\ an\ element\ into\ a\ specified\ index\r\n\ @param\ idx\ the\ int\ index\ of\ where\ you\ want\ to\ set\ a\ value\r\n\ @param\ obj\ the\ object\ you\ want\ to\ set\ the\ index\ as\r\n\ @return\ nothing\r\n
comment5.params=obj\ index
comment5.target=void\ insert(java.lang.Object,\ int)
comment5.text=this\ method\ will\ insert\ an\ object\ to\ any\ index\ through\ random\ access\r\n\ @param\ obj\ the\ object\ that\ will\ be\ inserted\r\n\ @param\ index\ the\ index\ of\ where\ to\ add\ the\ new\ obj\r\n\ @return\ nothing\r\n
comment6.params=index
comment6.target=java.lang.Object\ remove(int)
comment6.text=this\ method\ will\ remove\ an\ object\ from\ a\ specified\ index\r\n\ @param\ index\ the\ index\ of\ where\ to\ remove\ the\ object\ from\r\n\ @return\ the\ object\ that\ is\ now\ removed\ from\ the\ arraylist\ based\ on\ the\ index\r\n
comment7.params=obj
comment7.target=int\ indexOf(java.lang.Object)
comment7.text=method\ that\ will\ return\ the\ index\ of\ what\ obj\ is\ wanted\ to\ be\ located\r\n\ @param\ obj\ the\ obj\ that\ is\ being\ searched\r\n\ @return\ int\ value\ of\ the\ index\ where\ the\ obj\ is\ found\r\n
comment8.params=that
comment8.target=boolean\ equals(ArrayList)
comment8.text=method\ that\ returns\ a\ boolean\ of\ whether\ two\ comparing\ objects\ are\ the\ same\r\n\r\n\ @param\ that\ the\ arraylist\ that\ is\ being\ compared\ to\r\n\ @return\ boolean\ statement\ if\ whether\ the\ two\ arraylists\ are\ the\ same\ of\ not\r\n
comment9.params=idx1\ idx2
comment9.target=void\ swap(int,\ int)
comment9.text=this\ method\ will\ swap\ the\ objects\ from\ two\ indexes\r\n\ @param\ idx1\ integer\ of\ index\ in\ where\ to\ swap\ from\r\n\ @param\ idx2\ integer\ of\ index\ in\ where\ to\ swap\r\n
numComments=13
