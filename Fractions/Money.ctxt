#BlueJ class context
comment0.target=Money
comment0.text=\r\n\ The\ Money\ class\ will\ record\ the\ variables\ and\ values\ in\ integers\r\n\ of\ dollars\ and\ cents.\ The\ methods\ it\ contain\ will\ include\r\n\ getters\ and\ setters\ of\ the\ instances,\ as\ well\ as\ functions\ to\ add\r\n\ from\ inputs\ of\ int\ dollars,\ int\ dollars\ and\ cents,\ another\ Money\ object,\r\n\ and\ comparing\ two\ objects\ with\ an\ equal\ method,\ and\ a\ string\ method\r\n\ to\ print\ out\ a\ statement\ of\ the\ money\ object.\r\n\r\n\ @author\ Eunhee\ Kim\r\n\ @version\ December\ 5,\ 2019\r\n
comment1.params=dol
comment1.target=Money(int)
comment1.text=this\ constructor\ initializes\ using\ dollars\ input\ and\ assumes\ no\ cents\ to\ be\ added\r\n\r\n\ @param\ dol\ the\ integer\ of\ dollars\ that\ is\ passed\ in\ to\ initialize\ the\ amount\ of\ money\r\n\ in\ an\ object\r\n\r\n
comment10.params=d\ c
comment10.target=void\ setMoney(int,\ int)
comment10.text=sets\ our\ dollars\ and\ cents,\ accordingly\r\n\ this\ function\ should\ take\ use\ of\ setters\ for\ dollars\ and\ cents\r\n\r\n\ @param\ d\ integer\ dollars\ to\ set\ new\ values\ of\ d\r\n\ @param\ c\ integer\ cents\ to\ set\ new\ values\ of\ c\r\n
comment11.params=d
comment11.target=void\ add(int)
comment11.text=adds\ the\ int\ passed\ into\ the\ function\ to\ dollars\r\n\ should\ accept\ positive\ and\ negative\ arguments\r\n\r\n\ @param\ d\ adds\ integer\ d\ to\ dollars\r\n
comment12.params=d\ c
comment12.target=void\ add(int,\ double)
comment12.text=adds\ to\ dollars\ and\ cents\ the\ two\ ints\ passed\ into\ the\ function\r\n\ should\ accept\ positive\ and\ negative\ arguments\ (though\ both\r\n\ arguments\ have\ to\ be\ positive\ or\ negative)\r\n\r\n\ @param\ d\ adds\ the\ integer\ to\ add\ onto\ dollars\r\n\ @param\ c\ adds\ the\ integer\ to\ add\ onto\ cents\r\n
comment13.params=other
comment13.target=void\ add(Money)
comment13.text=adds\ to\ this\ object\ the\ dollars\ and\ cents\ stored\ in\ the\ other\ object\r\n\r\n\ @param\ other\ Money\ object\ that\ will\ add\ onto\ another\ Money\ object\ from\ the\ values\ implemented\ from\ other\r\n
comment14.params=o
comment14.target=boolean\ equals(java.lang.Object)
comment14.text=determines\ if\ this\ money\ object\ is\ equal\ to\ that\ Money\ object\r\n\r\n\ @param\ o\ Object\ to\ compare\ a\ Money\ object\ to\r\n\ @return\ boolean\ if\ the\ two\ objects\ are\ identical\r\n
comment15.params=
comment15.target=java.lang.String\ toString()
comment15.text=prints\ out\ a\ Money\ object\ as\ a\ String,\ such\ as\ \u201C$3.75\u201D\r\n\r\n\ @return\ the\ print\ statement\ of\ proper\ money\ form\r\n
comment16.params=o
comment16.target=int\ compareTo(java.lang.Object)
comment16.text=this\ method\ overrides\ from\ the\ implemented\ Comparable\ interface\ to\ fit\ the\ standards\r\n\ of\ the\ compareTo\ in\ terms\ of\ money/cost\r\n\ @param\ o\ the\ Object\ that\ will\ be\ comparing\ with\r\n\ @return\ int\ value\ of\ 1,\ 0,\ -1\ when\ comparing\ the\ money\ of\ the\ two\ objects\r\n
comment17.params=args
comment17.target=void\ main(java.lang.String[])
comment17.text=this\ will\ contain\ a\ driver\ method\ of\ where\ the\ methods\ in\ this\ class\r\nwill\ be\ tested\r\n
comment2.params=dol\ cent
comment2.target=Money(int,\ double)
comment2.text=this\ constructor\ initializes\ dollars\ and\ cents\ accordingly\r\n\r\n\ @param\ dol\ an\ integer\ of\ dollars\ to\ initialize\ the\ amount\ in\ a\ Money\ object\r\n\ @param\ cent\ an\ integer\ of\ cents\ to\ initialize\ to\ add\ on\ to\ combine\ with\ the\ amount\ in\ a\ Money\ object\r\n
comment3.params=m
comment3.target=Money(double)
comment4.params=other
comment4.target=Money(Money)
comment4.text=this\ constructor\ could\ redirect\ to\ the\ one\ above\r\n\ copy\ constructor\r\n\r\n\ @param\ other\ a\ Money\ object\ that\ copies\ over\ the\ instances\ and\ its\ values\r\n
comment5.params=
comment5.target=int\ getDollars()
comment5.text=getter\ for\ dollars\r\n\r\n\ @return\ the\ dollars\ in\ integers\ of\ a\ Money\ object\r\n
comment6.params=
comment6.target=double\ getCents()
comment6.text=getter\ for\ cents\r\n\r\n\ @return\ the\ cents\ in\ double\ of\ a\ Money\ object\r\n
comment7.params=d
comment7.target=void\ setDollars(int)
comment7.text=setter\ for\ dollars\r\n\r\n\ @param\ d\ setting\ the\ value\ of\ dollars\ with\ an\ integer\r\n
comment8.params=c
comment8.target=void\ setCents(double)
comment8.text=setter\ for\ cents\r\n\r\n\ @param\ c\ setting\ the\ value\ of\ cents\ with\ an\ integer\r\n
comment9.params=
comment9.target=double\ getMoney()
comment9.text=a\ getter\ for\ the\ total\ monetary\ amount,\ as\ a\ double\r\n\ returns\ 5.75\ for\ example\r\n\r\n\ @return\ a\ double\ value\ of\ the\ amount\ of\ money\ from\ a\ Money\ object\r\n
numComments=18
